{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","baseUrl","airports","routes","countries","airlines","planes","previousSelectedAirports","map","Path","props","path","speed","transferTime","length","className","Total","route","plane","split","replace","from","place","to","getFlag","country","fromIATA","toIATA","Math","round","distance","distanceToTime","airlineID","name","Airplane","IATA","reduce","p","c","hoursToTime","setRoutePopup","e","routePopup","getCanvas","style","cursor","features","properties","airlineCode","planeCodes","stops","coordinates","lngLat","roundedDistance","fromAirport","fromFlag","fromAirportHTML","toAirport","toFlag","toAirportHTML","airline","airlineFlag","time","planeHTML","airlineHTML","HTML","abs","lng","setLngLat","setHTML","addTo","hours","floor","minutes","fetchOpenFlights","a","fetch","then","res","text","forEach","line","fields","id","parseInt","ICAO","lat","parseFloat","lon","altitude","timezone","dst","current","Infinity","getDistanceFromLatLonInKm","concat","code","field","alias","callsign","active","AStar","console","log","averageAirplaneSpeed","fCost","gCost","hCost","distances","remainingFlightTime","states","fCosts","parents","key","keys","Object","flatMap","i","open","filter","closest","previous","setTimeout","backTrace","getSource","setData","type","geometry","currentAirport","airport","child","push","reverse","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","sin","cos","d","atan2","sqrt","isNaN","deg","PI","countryName","flag","App","state","undefined","fromQuery","toQuery","fromAirports","toAirports","selectedAirports","Map","container","center","zoom","connections","once","addSource","data","addLayer","source","paint","Popup","closeButton","closeOnClick","maxWidth","on","remove","hoverAirport","airportPopup","slice","IATAHTML","setState","selectedAirport","query","toLowerCase","includes","this","onFocus","placeholder","onChange","target","value","search","airportID","onClick","min","max","step","rel","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c15f3419.chunk.js","sourcesContent":["import React from \"react\"\nimport mapboxgl from \"mapbox-gl\"\nimport flag from \"country-code-emoji\"\nimport \"./App.css\"\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nmapboxgl.accessToken = \"pk.eyJ1IjoidG9pbmVodWxzaG9mIiwiYSI6ImNrYjhmZTU5NzAzcm4ydHJ4a2Rla296YWQifQ.rgmnLTeSXSyNSB4kjOtR0A\"\nconst baseUrl = \"https://raw.githubusercontent.com/jpatokal/openflights/master/data/\"\n\nlet airports = {}\nlet routes = {}\nlet countries = {}\nlet airlines = {}\nlet planes = {}\nlet previousSelectedAirports = []\nlet map = null\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      path: undefined,\n      fromQuery: \"\",\n      toQuery: \"\",\n      fromAirports: [],\n      toAirports: [],\n      selectedAirports: [],\n      averageAirplaneSpeed: 800,\n      transferTime: 2.0\n    }\n  }\n\n  componentDidMount() {\n    fetchOpenFlights(\"countries\")\n      .then(() => fetchOpenFlights(\"planes\"))\n      .then(() => fetchOpenFlights(\"airlines\"))\n      .then(() => fetchOpenFlights(\"airports\"))\n      .then(() => fetchOpenFlights(\"routes\"))\n      .then(() => {\n        map = new mapboxgl.Map({\n          container: \"map\",\n          style: \"mapbox://styles/mapbox/dark-v10\",\n          center: [10.0, 20.0],\n          zoom: 2\n        })\n        const features = []\n        for (let key in airports) {\n          const airport = airports[key]\n          features.push({\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates: [\n                airport.lon,\n                airport.lat\n              ]\n            },\n            properties: {\n              id: airport.id,\n              name: airport.name,\n              place: airport.place,\n              country: airport.country,\n              IATA: airport.IATA,\n              ICAO: airport.ICAO,\n              connections: (routes[airport.id] || []).length,\n              altitude: airport.altitude\n            }\n          })\n        }\n        // map.addControl(new mapboxgl.NavigationControl())\n        map.once(\"load\", () => {\n          map.addSource(\"airports\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: features\n            }\n          })\n          map.addLayer({\n            id: \"airports\",\n            source: \"airports\",\n            type: \"circle\",\n            paint: {\n              \"circle-opacity\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"connections\"],\n                0, 0.5,\n                500, 0.75,\n              ],\n              \"circle-stroke-width\": 1,\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"connections\"],\n                0, 2,\n                5, 4,\n                10, 8,\n                50, 12,\n                100, 16,\n                200, 20,\n                500, 30,\n                1000, 40,\n              ],\n              \"circle-color\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"altitude\"],\n                -100, '#f000ff',\n                0, '#0000ff',\n                150, '#00ff00',\n                300, '#fff000',\n                1000, '#ff7000',\n                5000, '#ff0000',\n              ],\n            }\n          })\n          map.addSource(\"selected\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: []\n            }\n          })\n          map.addLayer({\n            id: \"selected\",\n            source: \"selected\",\n            type: \"line\",\n            paint: {\n              \"line-opacity\": 0.75,\n              \"line-width\": 1,\n              \"line-color\": '#7777bb'\n            }\n          })\n          map.addSource(\"connections\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: []\n            }\n          })\n          map.addLayer({\n            id: \"connections\",\n            source: \"connections\",\n            type: \"line\",\n            paint: {\n              \"line-opacity\": 0.5,\n              \"line-width\": 1,\n              \"line-color\": '#777'\n            }\n          })\n          map.addSource(\"path\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: []\n            }\n          })\n          map.addLayer({\n            id: \"path\",\n            source: \"path\",\n            type: \"line\",\n            paint: {\n              // \"line-cap\": \"round\",\n              // \"line-join\": \"round\",\n              \"line-opacity\": 1,\n              \"line-width\": 5,\n              \"line-color\": '#fff'\n            }\n          })\n          map.addSource(\"exploring\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: []\n            }\n          })\n          map.addLayer({\n            id: \"exploring\",\n            source: \"exploring\",\n            type: \"line\",\n            paint: {\n              // \"line-cap\": \"round\",\n              // \"line-join\": \"bevel\",\n              \"line-opacity\": 1,\n              \"line-width\": 3,\n              \"line-color\": '#eb34e1'\n            }\n          })\n        })\n        const routePopup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: true,\n          maxWidth: '200px'\n        });\n        map.on(\"mousemove\", \"selected\", (e) => {\n          setRoutePopup(e, routePopup, this.state.averageAirplaneSpeed)\n        })\n        map.on(\"mouseleave\", \"selected\", (e) => {\n          map.getCanvas().style.cursor = \"\"\n          routePopup.remove()\n        })\n        map.on(\"mousemove\", \"path\", (e) => {\n          setRoutePopup(e, routePopup, this.state.averageAirplaneSpeed)\n        })\n        map.on(\"mouseleave\", \"path\", (e) => {\n          map.getCanvas().style.cursor = \"\"\n          routePopup.remove()\n        })\n        let hoverAirport = null\n        const airportPopup = new mapboxgl.Popup({\n          className: \"airport-popup\",\n          closeButton: false,\n          closeOnClick: true,\n          maxWidth: '200px'\n        });\n        map.on(\"mousemove\", \"airports\", (e) => {\n          if (hoverAirport) {\n            if (hoverAirport === e.features[0].properties.id) { return }\n          }\n          map.getCanvas().style.cursor = \"pointer\"\n          const { id, name, place, country, IATA, ICAO, connections, altitude } = e.features[0].properties\n          hoverAirport = id\n          const flag = getFlag(country)\n          const coordinates = e.features[0].geometry.coordinates.slice()\n          const IATAHTML = IATA !== \"\\\\N\" ? `<p>IATA: <b>${IATA}</b></p>` : \"\";\n          const HTML = `<p>Name: <b>${name}</b></p>\n                        <p>Place: <b>${place}</b></p>\n                        <p>Country: <b>${country} ${flag}</b></p>\n                        ${IATAHTML}\n                        <p>ICAO: <b>${ICAO}</b></p>\n                        <p>Connections: <b>${connections}</b></p>\n                        <p>Alititude: <b>${altitude} feet</b></p>`\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          }\n          airportPopup\n            .setLngLat(coordinates)\n            .setHTML(HTML)\n            .addTo(map)\n          map.getSource(\"connections\").setData({\n            type: \"FeatureCollection\",\n            features: (routes[hoverAirport] || []).filter(route => airports[route.from] && airports[route.to]).map((route) => ({\n              type: \"Feature\",\n              geometry: {\n                type: \"LineString\",\n                coordinates: [\n                  [airports[route.from].lon + (Math.abs(airports[route.from].lon - airports[route.to].lon) > 180 ? (airports[route.from].lon > airports[route.to].lon ? -360 : 360) : 0), airports[route.from].lat],\n                  [airports[route.to].lon, airports[route.to].lat]\n                ]\n              }\n            }))\n          })\n        })\n        map.on(\"mouseleave\", \"airports\", (e) => {\n          map.getCanvas().style.cursor = \"\"\n          airportPopup.remove()\n          hoverAirport = null\n          map.getSource(\"connections\").setData({\n            type: \"FeatureCollection\",\n            features: []\n          })\n        })\n        map.on(\"click\", (e) => {\n          previousSelectedAirports = this.state.selectedAirports\n          this.setState({\n            path: undefined,\n            fromAirports: [],\n            toAirports: [],\n            selectedAirports: []\n          })\n          map.getSource(\"selected\").setData({\n            type: \"FeatureCollection\",\n            features: []\n          })\n          map.getSource(\"path\").setData({\n            type: \"FeatureCollection\",\n            features: []\n          })\n        })\n        map.on(\"click\", \"airports\", (e) => {\n          this.setState({\n            selectedAirports: previousSelectedAirports.concat([e.features[0].properties.id])\n          })\n          if (this.state.selectedAirports.length === 2) {\n            const path = AStar(this.state.selectedAirports[0], this.state.selectedAirports[1], this.state.averageAirplaneSpeed, this.state.transferTime)\n            this.setState({\n              path: path,\n              selectedAirports: []\n            })\n          }\n          map.getSource(\"selected\").setData({\n            type: \"FeatureCollection\",\n            features: this.state.selectedAirports.flatMap((selectedAirport) => (routes[selectedAirport] || []).filter(route => airports[route.from] && airports[route.to]).map((route) => ({\n              type: \"Feature\",\n              geometry: {\n                type: \"LineString\",\n                coordinates: [\n                  [airports[route.from].lon + (Math.abs(airports[route.from].lon - airports[route.to].lon) > 180 ? (airports[route.from].lon > airports[route.to].lon ? -360 : 360) : 0), airports[route.from].lat],\n                  [airports[route.to].lon, airports[route.to].lat]\n                ]\n              },\n              properties: {\n                from: route.from,\n                fromIATA: route.fromIATA,\n                to: route.to,\n                toIATA: route.toIATA,\n                airlineCode: route.airline,\n                airlineID: route.airlineID,\n                distance: route.distance,\n                stops: route.stops,\n                planeCodes: route.planes//.split(' ')\n              }\n            })))\n          })\n        })\n      })\n  }\n\n  search(query) {\n    const results = Object.keys(airports).filter(key => {\n      return airports[key].place.toLowerCase().includes(query.toLowerCase()) || airports[key].IATA.toLowerCase().includes(query.toLowerCase()) || airports[key].name.toLowerCase().includes(query.toLowerCase())\n    }).slice(0, 10)\n    return results\n  }\n\n  render() {\n    const { path, fromQuery, toQuery, fromAirports, toAirports, selectedAirports, averageAirplaneSpeed, transferTime } = this.state\n    return (\n      <div className=\"App\">\n        <div id=\"map\"/>\n        <Path path={path} speed={averageAirplaneSpeed} transferTime={transferTime} />\n        <div className=\"welcome\">\n          <h4><b>Flight Visualizer</b></h4>\n          {/* <p>Click on two airports to find the shortest route between them using the A* algorithm!</p> */}\n          <p>Find the shortest route between two airports.<br></br>Click on airports or search them below!</p>\n          <div className=\"search-box\">\n            <input \n              type=\"text\"\n              className=\"search-bar\"\n              onFocus={e => this.setState({\n                fromQuery: \"\"\n              })}\n              placeholder=\"From\"\n              onChange={e => {\n                const fromAirports = e.target.value === \"\" ? [] : this.search(e.target.value)\n                this.setState({\n                  fromQuery: e.target.value,\n                  fromAirports: fromAirports\n                })\n              }}\n              value={fromQuery}\n            />\n            {fromAirports.map(airportID => {\n              const airport = airports[airportID]\n              const flag = getFlag(airport.country)\n              const IATAHTML = `(${airport.IATA === \"\\\\N\" ? airport.ICAO : airport.IATA})`\n              return (\n                <div className=\"result\" onClick={e => {\n                  if (selectedAirports.length >= 1) {\n                    const path = AStar(parseInt(airportID), parseInt(selectedAirports[0]), averageAirplaneSpeed, transferTime)\n                    this.setState({\n                      path: path,\n                      selectedAirports: [],\n                      fromAirports: [],\n                      fromQuery: `${flag} ${airport.place} (${airport.IATA || airport.ICAO})`\n                    })\n                  } else {\n                    this.setState({\n                      selectedAirports: [airportID],\n                      fromAirports: [],\n                      fromQuery: `${flag} ${airport.place} (${airport.IATA || airport.ICAO})`\n                    })\n                  }\n                }}>\n                  {getFlag(airport.country)} {airport.place} <b>{IATAHTML}</b>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"search-box\">\n            <input \n              type=\"text\"\n              className=\"search-bar\"\n              onFocus={e => this.setState({\n                toQuery: \"\"\n              })}\n              placeholder=\"To\"\n              onChange={e => {\n                const toAirports = e.target.value === \"\" ? [] : this.search(e.target.value)\n                this.setState({\n                  toQuery: e.target.value,\n                  toAirports: toAirports\n                })\n              }}\n              value={toQuery}\n            />\n            {toAirports.map(airportID => {\n              const airport = airports[airportID]\n              const IATAHTML = `(${airport.IATA === \"\\\\N\" ? airport.ICAO : airport.IATA})`\n              const flag = getFlag(airport.country)\n              return (\n                <div className=\"result\" onClick={e => {\n                  if (selectedAirports.length >= 1) {\n                    const path = AStar(parseInt(selectedAirports[0]), parseInt(airportID), averageAirplaneSpeed, transferTime)\n                    this.setState({\n                      path: path,\n                      selectedAirports: [],\n                      toAirports: [],\n                      toQuery: `${flag} ${airport.place} (${airport.IATA || airport.ICAO})`\n                    })\n                  } else {\n                    this.setState({\n                      selectedAirports: [airportID],\n                      toAirports: [],\n                      toQuery: `${flag} ${airport.place} (${airport.IATA || airport.ICAO})`\n                    })\n                  }\n                }}>\n                {getFlag(airport.country)} {airport.place} <b>{IATAHTML}</b>\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"slider-container\">\n            <p>Average speed { averageAirplaneSpeed }km/h</p>\n            <input\n              className=\"slider\"\n              type=\"range\" \n              min=\"400\" \n              max=\"1200\" \n              value={averageAirplaneSpeed} \n              id=\"myRange\"\n              onChange={e => {\n                this.setState({\n                  averageAirplaneSpeed: parseFloat(e.target.value)\n                })\n              }}\n            />\n          </div>\n          <div className=\"slider-container\">\n            <p>Transfer time { transferTime }h</p>\n            <input\n              className=\"slider\"\n              type=\"range\" \n              min=\"0\" \n              max=\"10\"\n              step=\"0.5\"\n              value={transferTime} \n              id=\"myRange\"\n              onChange={e => {\n                this.setState({\n                  transferTime: parseFloat(e.target.value)\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"banner\">\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/ToineHulshof/FlightVisualizer\">💻Source Code </a>\n          Toine Hulshof 2020\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction Path(props) {\n  const path = props.path\n  const speed = props.speed\n  const transferTime = props.transferTime\n  if (!path) return \"\"\n  if (path.length === 0) { return(\n    <div className = \"path\">\n      <h4>No Path Found</h4>\n    </div>\n  ) }\n  return (\n    <div className = \"path\">\n    <h4>Shortest Path</h4>\n    <Total path={path} speed={speed} transferTime={transferTime} />\n    {path.map(route => {\n      const plane = planes[route.planes.split(' ')[0].replace(/[\\r\\n]+/gm,\"\")]\n      return <table className=\"path-element\">\n        <tr>\n          <td>Places:</td>\n          <td className=\"right-table-cell\"><b>{airports[route.from].place} - {airports[route.to].place}</b></td>\n        </tr>\n        <tr>\n          <td>Route:</td>\n          <td className=\"right-table-cell\">{getFlag(airports[route.from].country)} <b>{route.fromIATA} - {route.toIATA}</b> {getFlag(airports[route.to].country)}</td>\n        </tr>\n        <tr>\n          <td>Info:</td>\n          <td className=\"right-table-cell\"><b>{Math.round(route.distance)}km - {distanceToTime(route.distance, speed)}</b></td>\n        </tr>\n        <tr>\n          <td>Airline:</td>\n          <td className=\"right-table-cell\"><b>{airlines[route.airlineID].name}</b> {getFlag(airlines[route.airlineID].country)}</td>\n        </tr>\n        <Airplane plane={plane} />\n      </table>\n    })}\n  </div>\n  );\n}\n\nfunction Airplane(props) {\n  const plane = props.plane\n  if (!plane) return \"\"\n  return (\n    <tr>\n      <td>Airplane:</td>\n      <td className=\"right-table-cell\"><b>{plane.name}</b></td>\n    </tr>\n  );\n}\n\nfunction Total(props) {\n  const { path, speed, transferTime } = props\n  if (path.length === 0) { return \"\" }\n  const from = path[0].from\n  const to = path[path.length - 1].to\n  return (\n    <table className=\"total path-element\">\n      <tr>\n        <td>Places:</td>\n        <td className=\"right-table-cell\"><b>{airports[from].place} - {airports[to].place}</b></td>\n      </tr>\n      <tr>\n        <td>Route:</td>\n        <td className=\"right-table-cell\">{getFlag(airports[from].country)} <b>{airports[from].IATA} - {airports[to].IATA}</b> {getFlag(airports[to].country)}</td>\n      </tr>\n      <tr>\n        <td>Info:</td>\n        <td className=\"right-table-cell\"><b>{Math.round(path.reduce((p, c) => p + c.distance, 0))}km - {distanceToTime(path.reduce((p, c) => p + c.distance, 0), speed)}</b></td>\n      </tr>\n      <tr>\n        <td>Stops:</td>\n        <td className=\"right-table-cell\"><b>{path.length - 1} stops - {(path.length - 1) * transferTime}h</b></td>\n      </tr>\n      <tr>\n        <td>Total:</td>\n        <td className=\"right-table-cell\"><b>{hoursToTime(((path.length - 1) * transferTime) + (path.reduce((p, c) => p + c.distance, 0) / speed))}</b></td>\n      </tr>\n    </table>\n  )\n}\n\nfunction setRoutePopup(e, routePopup, speed) {\n  map.getCanvas().style.cursor = \"pointer\"\n  const { from, fromIATA, to, toIATA, airlineCode, airlineID, distance, stops, planeCodes } = e.features[0].properties\n  // const flag = getFlag(country)\n  const coordinates = e.lngLat\n  const roundedDistance = Math.round(distance)\n  const fromAirport = airports[from]\n  const fromFlag = fromAirport ? getFlag(fromAirport.country) : \"\"\n  const fromAirportHTML = fromAirport ? `<b>${fromAirport.place}</b>` : \"\";\n  const toAirport = airports[to]\n  const toFlag = toAirport ? getFlag(toAirport.country) : \"\"\n  const toAirportHTML = toAirport ? `<b>${toAirport.place}</b>` : \"\";\n  const airline = airlines[airlineID]\n  const airlineFlag = airline ? getFlag(airline.country) : \"\"\n  const plane = planes[planeCodes.split(' ')[0]]\n  const time = distanceToTime(roundedDistance, speed)\n  const planeHTML = plane ? `<p>Plane: <b>${plane.name}</b></p>` : \"\"\n  const airlineHTML = airline ? `<p>Airline: <b>${airline.name} ${airlineFlag}</b></p>` : \"\"\n  const HTML = `<p>From: ${fromAirportHTML} <b>(${fromIATA}) ${fromFlag}</b></p>\n                <p>To: ${toAirportHTML} <b>(${toIATA}) ${toFlag}</b></p>\n                ${airlineHTML}\n                ${planeHTML}\n                <p>Distance: <b>${roundedDistance}km (${time})</b></p>`\n  while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n  }\n  routePopup\n    .setLngLat(coordinates)\n    .setHTML(HTML)\n    .addTo(map)\n}\n\nfunction distanceToTime(distance, speed) {\n  const totalTime = distance / speed\n  return hoursToTime(totalTime)\n}\n\nfunction hoursToTime(time) {\n  const hours = Math.floor(time)\n  const minutes = Math.round((time % 1) * 60)\n  return `${hours}h${minutes}m`\n}\n\nasync function fetchOpenFlights(name) {\n  await fetch(baseUrl + name + \".dat\")\n    .then(res => res.text())\n    .then(text => {\n      switch (name) {\n        case \"airports\":\n          text.split('\\n').forEach((line) => {\n            const fields = line.split(',')\n            const id = fields[0]\n            airports[id] = {\n              id: parseInt(id),\n              name: (fields[1] || \"\").replace(/\"/g,\"\"),\n              place: (fields[2] || \"\").replace(/\"/g,\"\"),\n              country: (fields[3] || \"\").replace(/\"/g,\"\"),\n              IATA: (fields[4] || \"\").replace(/\"/g,\"\"),\n              ICAO: (fields[5] || \"\").replace(/\"/g,\"\"),\n              lat: parseFloat(fields[6]),\n              lon: parseFloat(fields[7]),\n              altitude: parseInt(fields[8]),\n              timezone: fields[9],\n              dst: fields[10]\n            }\n          })\n          break\n        case \"routes\":\n          routes = text.split('\\n').reduce((current, route) => {\n            const fields = route.split(',')\n            const id = fields[3]\n            const from = parseInt(fields[3])\n            const to = parseInt(fields[5])\n            const fromAirport = airports[from]\n            const toAirport = airports[to]\n            let distance = Infinity\n            if (fromAirport && toAirport) {\n              distance = getDistanceFromLatLonInKm(fromAirport.lat, fromAirport.lon, toAirport.lat, toAirport.lon)\n            }\n            current[id] = (current[id] || []).concat({\n              from: from,\n              fromIATA: fields[2],\n              to: to,\n              toIATA: fields[4],\n              airline: fields[0],\n              airlineID: parseInt(fields[1]),\n              distance: distance,\n              stops: fields[7],\n              planes: fields[8]//.split(' ')\n            })\n            return current\n          }, {})\n          break\n        case \"countries\":\n          text.split('\\n').forEach((line) => {\n            const fields = line.split(',')\n            countries[(fields[0] || \"\").replace(/\"/g,\"\")] = {\n              name: (fields[0] || \"\").replace(/\"/g,\"\"),\n              code: (fields[1] || \"\").replace(/\"/g,\"\")\n            }\n          })\n          break\n        case \"planes\":\n          text.split('\\n').forEach((line) => {\n            const fields = line.split(',').map(field => field.replace(/\"|\\\\r/g,\"\"))\n            planes[fields[1]] = {\n              name: fields[0],\n              IATA: fields[1],\n              ICAO: fields[2]\n            }\n          })\n          break\n        case \"airlines\":\n          text.split('\\n').forEach((line) => {\n            const fields = line.split(',')\n            const id = parseInt(fields[0])\n            airlines[id] = {\n              id: id,\n              name: (fields[1] || \"\").replace(/\"/g,\"\"),\n              alias: fields[2],\n              IATA: fields[3],\n              ICAO: fields[4],\n              callsign: fields[5],\n              country: (fields[6] || \"\").replace(/\"/g,\"\"),\n              active: fields[7] === \"Y\"\n            }\n          })\n          break\n        default:\n          break\n      }\n    })\n}\n\nfunction AStar(from, to, speed, transferTime) {\n  console.log(\"AStar\", from, to, speed, transferTime)\n  const averageAirplaneSpeed = speed //km/h\n  const fCost = route => gCost(route) + hCost(route)\n  const gCost = route => distances[route.from] + (route.distance / averageAirplaneSpeed) + (route.to === to ? 0 : transferTime)\n  const hCost = route => {\n    const fromAirport = airports[route.to]\n    const toAirport = airports[to]\n    let remainingFlightTime = Infinity\n    if (fromAirport && toAirport) {\n      remainingFlightTime = getDistanceFromLatLonInKm(fromAirport.lat, fromAirport.lon, toAirport.lat, toAirport.lon) / averageAirplaneSpeed // hours \n    }\n    return remainingFlightTime\n  }\n  let states = {}\n  let distances = {}\n  let fCosts = {}\n  let parents = {}\n  for (let key in airports) {\n    distances[key] = Infinity\n    fCosts[key] = Infinity\n  }\n  distances[from] = 0\n  states[from] = \"open\"\n  const keys = Object.keys(distances).flatMap(key => parseInt(key))\n  for (let i = 0; i < keys.length - 1; i++) {\n    const open = keys.filter(key => states[key] === \"open\")\n    if (open.length === 0) { return [] } //No path found\n    const closest = open.reduce((previous, current) => {\n      return fCosts[previous] < fCosts[current] ? previous : current\n    })\n    setTimeout(() => {\n      if (closest === to) {\n        const path = backTrace(to)\n        map.getSource(\"exploring\").setData({\n          type: \"FeatureCollection\",\n          features: []\n        })\n        map.getSource(\"path\").setData({\n          type: \"FeatureCollection\",\n          features: path.map((route) => ({\n            type: \"Feature\",\n            geometry: {\n              type: \"LineString\",\n              coordinates: [\n                [airports[route.from].lon + (Math.abs(airports[route.from].lon - airports[route.to].lon) > 180 ? (airports[route.from].lon > airports[route.to].lon ? -360 : 360) : 0), airports[route.from].lat],\n                [airports[route.to].lon, airports[route.to].lat]\n              ]\n            },\n            properties: {\n              from: route.from,\n              fromIATA: route.fromIATA,\n              to: route.to,\n              toIATA: route.toIATA,\n              airlineCode: route.airline,\n              airlineID: route.airlineID,\n              distance: route.distance,\n              stops: route.stops,\n              planeCodes: route.planes//.split(' ')\n            }\n          }))\n        })\n      } else {\n        setMapData(closest)\n      }\n    }, 20 * i)\n    if (closest === to) {\n      return backTrace(to)// Found shortest path!\n    }\n    states[closest] = \"closed\"\n    for (const route of (routes[closest] || [])) {\n      if (states[route.to] === \"closed\") { continue }\n      if (gCost(route) < distances[route.to] || states[route.to] !== \"open\") {\n        parents[route.to] = route\n        distances[route.to] = gCost(route)\n        fCosts[route.to] = fCost(route)\n        states[route.to] = \"open\"\n      }\n    }\n  }\n  return [] // No path found\n\n  function backTrace(airport) {\n    let path = []\n    let child = airport\n    while (child !== from) {\n      path.push(parents[child])\n      child = parents[child].from\n    }\n    return path.reverse()\n  }\n\n  function setMapData(currentAirport) {\n    map.getSource(\"exploring\").setData({\n      type: \"FeatureCollection\",\n      features: backTrace(currentAirport).filter(route => airports[route.from] && airports[route.to]).map((route) => ({\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates: [\n            [airports[route.from].lon + (Math.abs(airports[route.from].lon - airports[route.to].lon) > 180 ? (airports[route.from].lon > airports[route.to].lon ? -360 : 360) : 0), airports[route.from].lat],\n            [airports[route.to].lon, airports[route.to].lat]\n          ]\n        }\n      }))\n    })\n  }\n}\n\nfunction BFS() {\n  const from = this.state.selectedAirports[0]\n  const to = this.state.selectedAirports[1]\n  let visited = {}\n  for (let key in airports) {\n    visited[key] = false\n  }\n  visited[from] = true\n  let queue = [{current: from, path: [from]}]\n  while (queue.length !== 0) {\n    const { current, path } = queue.shift()\n    if (current === to) { return path }\n    for (const route of (routes[current] || [])) {\n      if (!visited[route.to]) {\n        visited[route.to] = true\n        queue.push({current: route.to, path: path.concat([route.to])})\n      }\n    }\n  }\n  return []\n}\n\nfunction getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n  var R = 6371; // Radius of the earth in km\n  var dLat = deg2rad(lat2-lat1);  // deg2rad below\n  var dLon = deg2rad(lon2-lon1); \n  var a = \n    Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n    Math.sin(dLon/2) * Math.sin(dLon/2)\n    ; \n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n  var d = R * c; // Distance in km\n  return isNaN(d) ? Infinity : d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI/180)\n}\n\nfunction getFlag(countryName) {\n  const country = countries[(countryName || \"\")]\n  if (country && country.code && country.code !== \"\\\\N\" && country.code.length === 2) {\n    return flag(country.code)\n  }\n  return \"\"\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}